{"version":3,"sources":["containers/ProducerOrdersPage/constants.js","containers/ProducerOrdersPage/reducer.js","containers/ProducerOrdersPage/saga.js","containers/ProducerOrdersPage/actions.js","containers/ProducerOrdersPage/selectors.js","containers/ProducerOrdersPage/OrderItem.js","containers/ProducerOrdersPage/index.js","utils/calcOrderTotal.js","components/OrderLine/QuantityButtonStyle.js","components/OrderLine/index.js","components/OrderModalContent/index.js"],"names":["FETCH_ORDERS","FETCH_ORDERS_SUCCESS","FETCH_ORDERS_ERROR","EDIT_ORDER","EDIT_ORDER_SUCCESS","EDIT_ORDER_ERROR","CLEAR_ORDERS","initialState","fetchingOrders","fetchOrdersError","editingOrder","editOrderError","orders","producerOrdersPageReducer","state","action","produce","draftState","type","editObj","_id","order","map","fetchOrders","editOrder","fetchOrdersSaga","editOrderSaga","rootSaga","call","getPrivateRoute","privateRoute","fetchOrdersData","get","response","data","put","error","editOrderData","patch","debounce","spawn","selectProducerOrdersPageDomain","ProducerOrdersPage","mapStateToProps","createStructuredSelector","userProfile","makeSelectUser","orderEditing","createSelector","substate","withConnect","connect","dispatch","orderEdit","compose","ordersInfo","index","useState","orderData","setOrderData","role","useEffect","handleConfirm","a","confirmedOrder","status","handleChangesConfirm","itemsApproved","items","filter","orderItem","orderChange","pendingOrder","handleReject","rejectedOrder","handleCancel","cancelledOrder","Popup","mouseEnterDelay","trigger","Table","Row","warning","producerNotification","retailerNotification","style","color","Cell","orderNumber","toString","padStart","moment","createdAt","format","Image","marginLeft","src","businesses","avatarSource","alt","avatar","to","businessId","businessName","displayType","thousandSeparator","decimalScale","fixedDecimalScale","prefix","value","calcOrderTotal","fontWeight","textAlign","width","Can","perform","yes","Button","loading","onClick","basic","icon","title","content","OrderModalContent","orderItems","wide","ordersFetch","ordersClear","useInjectReducer","key","reducer","useInjectSaga","saga","isAuthenticated","useAuth0","orderStatuses","setOrderStatuses","statusFilter","setStatusFilter","statuses","Set","label","Helmet","name","PageWrapper","Segment","className","Header","as","unstackable","HeaderCell","colSpan","options","placeholder","onChange","selected","defaultValue","isClearable","escapeClearsValue","Body","Fragment","reduce","acc","val","price","orderQuant","OrderLineStyle","styled","div","OrderLine","orderLine","handleDeleteItem","handleDecreaseQuant","handleIncreaseQuant","positive","id","disabled","suffix","abv","PACK_SIZES","packSize","negative","QuantityButtonStyle","Group","size","compact","primary","distancePurchase","deliveryInstruction","distantPurchasingConditions","distantPurchasingMinimumMet","availableStock","handleAddItem","newItem","setNewItem","addingItem","setAddingItem","Modal","Content","overflowX","celled","minWidth","stockItem","Footer","attached","Grid","columns","Column","selectedOption","fluid","Message","Number","minSpend","toFixed","info"],"mappings":"qRAWaA,EAAe,4CACfC,EAAuB,oDACvBC,EAAqB,kDACrBC,EAAa,0CACbC,EAAqB,kDACrBC,EAAmB,gDACnBC,EAAe,4CCNfC,EAAe,CAC1BC,gBAAgB,EAChBC,kBAAkB,EAClBC,cAAc,EACdC,gBAAgB,EAChBC,QAAQ,GAmDKC,EA/CmB,eAACC,EAAD,uDAASP,EAAcQ,EAAvB,8CAAkCC,YAAQF,GAAO,SAACG,GAClF,OAAQF,EAAOG,MACb,QACE,MACF,KAAKlB,EACHiB,EAAWR,kBAAmB,EAC9BQ,EAAWT,gBAAiB,EAC5B,MACF,KAAKP,EACCc,EAAOH,SACTK,EAAWL,OAASG,EAAOH,OAC3BK,EAAWR,kBAAmB,GAEhCQ,EAAWT,gBAAiB,EAC5B,MACF,KAAKN,EACHe,EAAWR,kBAAmB,EAC9BQ,EAAWT,gBAAiB,EAC5B,MACF,KAAKL,EACCY,EAAOI,UACTF,EAAWN,gBAAiB,EAC5BM,EAAWP,aAAeK,EAAOI,QAAQC,KAE3C,MACF,KAAKhB,EACCW,EAAOM,QACTJ,EAAWL,OAAOA,OAASK,EAAWL,OAAOA,OAAOU,KAAI,SAACD,GACvD,OAAIA,EAAMD,MAAQL,EAAOM,MAAMD,IACtBL,EAAOM,MAETA,KAETJ,EAAWN,gBAAiB,GAE9BM,EAAWP,cAAe,EAC1B,MACF,KAAKL,EACHY,EAAWN,gBAAiB,EAC5BM,EAAWP,cAAe,EAC1B,MACF,KAAKJ,EACHW,EAAWL,QAAS,O,wDCrDhBW,G,WAsBAC,G,WAiBAC,G,WAIAC,G,WAIeC,GA/CzB,SAAUJ,IAAV,6EAEyB,OAFzB,kBAE+BK,YAAKC,KAFpC,OAIqB,OAFXC,EAFV,OAGUC,EAAkB,kBAAMD,EAAaE,IAAI,YAHnD,SAI2BJ,YAAKG,GAJhC,UAIUE,EAJV,OAYUC,EAZV,eAYsBD,EAASC,OAEvBD,EAASC,KAdjB,iBAeM,OAfN,UAeYC,YCHH,CACLjB,KAAMjB,EACNW,ODC0BsB,IAf9B,gCAkBI,OAlBJ,oCAkBUC,aCAuBC,EDAF,EAAD,GCCrB,CACLlB,KAAMhB,EACNkC,WDrBJ,kCCkBO,IAA0BA,IDlBjC,iBAsBA,SAAUZ,EAAV,gFAEyB,OAFHL,EAAtB,EAAsBA,QAAtB,kBAE+BS,YAAKC,KAFpC,OAKqB,OAHXC,EAFV,OAGUO,EAAgB,kBAAMP,EAAaQ,MAAb,kBAA8BnB,EAAQC,KAAOD,IAH7E,SAK2BS,YAAKS,GALhC,YAKUJ,EALV,QAMiBC,KANjB,iBAOM,OAPN,UAOYC,aCCgBd,EDDAY,EAASC,KAAKb,MCEjC,CACLH,KAAMd,EACNiB,WDXJ,gCAUI,OAVJ,oCAUUc,aCKqBC,EDLF,EAAD,GCMnB,CACLlB,KAAMb,EACN+B,WDlBJ,kCCeO,IAAwBA,EAPHf,IDR5B,iBAiBA,SAAUI,IAAV,iEACE,OADF,SACQc,YAAS,IAAMvC,EAAcuB,GADrC,uCAIA,SAAUG,IAAV,iEACE,OADF,SACQa,YAAS,IAAMpC,EAAYqB,GADnC,uCAIe,SAAUG,IAAV,iEACb,OADa,SACPa,YAAMf,GADC,OAEb,OAFa,SAEPe,YAAMd,GAFC,uCEjDf,IAAMe,EAAiC,SAAC3B,GAAD,OAAWA,EAAM4B,oBAAsBnC,G,8GC+NxEoC,GAAkBC,YAAyB,CAC/CC,YAAaC,eACbC,aDvNmCC,YACnCP,GACA,SAACQ,GAAD,OAAcA,EAASvC,kBC8NzB,IAAMwC,GAAcC,YAClBR,IAPF,SAA4BS,GAC1B,MAAO,CACLC,UAAW,SAAClC,GAAD,OAAaiC,EF3MH,SAACjC,GAAD,MAAc,CACrCD,KAAMf,EACNgB,WEyMmCK,CAAUL,SAShCmC,eACbJ,GADaI,EAnOG,SAAC,GAEZ,IADLT,EACI,EADJA,YAAaU,EACT,EADSA,WAAYlC,EACrB,EADqBA,MAAOmC,EAC5B,EAD4BA,MAAOH,EACnC,EADmCA,UAAWN,EAC9C,EAD8CA,aAC9C,EAC8BU,mBAAS,eAAKpC,IAD5C,mBACGqC,EADH,KACcC,EADd,KAGIC,EAASf,EAATe,KAERC,qBAAU,WACRF,EAAa,eAAKtC,MACjB,CAACA,IAEJ,IAAMyC,EAAa,uCAAG,4BAAAC,EAAA,sDAEdC,EAAiB,CAAE5C,IAAKsC,EAAUtC,IAAK6C,OAA6B,cAArBP,EAAUO,OAAyB,UAAY,aACpGZ,EAAUW,GAHU,2CAAH,qDAcbE,EAAoB,uCAAG,8BAAAH,EAAA,sDAErBI,EAAgB9C,EAAM+C,MACzBC,QAAO,SAACC,GAAD,MAAyC,WAA1BA,EAAUC,eAChCjD,KAAI,SAACgD,GAAD,mBAAC,eAAoBA,GAArB,IAAgCC,YAAa,QAC9CC,EAAe,CAAEpD,IAAKsC,EAAUtC,IAAK6C,OAAQ,UAAWG,MAAOD,GAErEd,EAAUmB,GAPiB,2CAAH,qDAmBpBC,EAAY,uCAAG,4BAAAV,EAAA,sDAEbW,EAAgB,CAAEtD,IAAKsC,EAAUtC,IAAK6C,OAA6B,aAArBP,EAAUO,OAAwB,UAAY,YAElGZ,EAAUqB,GAJS,2CAAH,qDAeZC,EAAY,uCAAG,4BAAAZ,EAAA,sDAEba,EAAiB,CAAExD,IAAKsC,EAAUtC,IAAK6C,OAAQ,aAErDZ,EAAUuB,GAJS,2CAAH,qDAgBlB,OACE,kBAACC,EAAA,EAAD,CACEC,gBAAiB,IACjBC,QACE,kBAACC,EAAA,EAAMC,IAAP,CAAWC,QAA8B,aAArBrC,EAAYe,KAAsBF,EAAUyB,qBAAuBzB,EAAU0B,qBAAsBC,MAAO,CAAEC,OAAyB,aAAjBjE,EAAM4C,QAA0C,cAAjB5C,EAAM4C,SAA2B,cACtM,kBAACe,EAAA,EAAMO,KAAP,kBAAmBlE,EAAMmE,YAAYC,WAAWC,SAAS,EAAG,OAC5D,kBAACV,EAAA,EAAMO,KAAP,KAAaI,IAAOtE,EAAMuE,WAAWC,OAAO,eAC5C,kBAACb,EAAA,EAAMO,KAAP,KACE,kBAACO,EAAA,EAAD,CAAOT,MAAO,CAAEU,WAAY,SAAWC,IAAKzC,EAAW0C,WAAWzC,GAAO0C,cAAgB,oCAAqCC,IAAI,cAAcC,QAAM,IAChI,aAArBvD,EAAYe,KACT,kBAAC,IAAD,CAAMyC,GAAE,mBAAc9C,EAAW0C,WAAWzC,GAAO8C,aAAe/C,EAAW0C,WAAWzC,GAAO+C,cAC/F,oCAAGhD,EAAW0C,WAAWzC,GAAO+C,eAEtC,kBAACvB,EAAA,EAAMO,KAAP,KACE,kBAAC,IAAD,CACEiB,YAAY,OACZC,mBAAiB,EACjBC,aAAc,EACdC,mBAAiB,EACjBC,OAAO,OAEPC,MAAOC,YAAezF,EAAM+C,UAGhC,kBAACY,EAAA,EAAMO,KAAP,CAAYF,MAAO,CAAE0B,WAA6B,cAAjB1F,EAAM4C,QAA0B,SAAW5C,EAAM4C,QAClF,kBAACe,EAAA,EAAMO,KAAP,CAAYyB,UAAU,SAASC,MAAO,GAAG,kBAAC,IAAD,CAAMZ,GAAE,iBAAYhF,EAAMD,MAA1B,iBAsDzC,kBAAC4D,EAAA,EAAMO,KAAP,CAAYyB,UAAU,UACpB,kBAACE,GAAA,EAAD,CACEtD,KAAMA,EACNuD,QAAQ,iBACRC,IAAK,kBAA4B,YAArB1D,EAAUO,QAA6C,cAArBP,EAAUO,SACtD,kBAACoD,EAAA,EAAD,CAAQC,QAASvE,IAAiBW,EAAUtC,IAAKmG,QAASzD,EAAe0D,MAA4B,cAArB9D,EAAUO,OAAwBqB,MAAM,QAAQmC,KAAK,QAAQC,MAAM,qBAGvJ,kBAACR,GAAA,EAAD,CACEtD,KAAMA,EACNuD,QAAQ,yBACRC,IAAK,iBAA4B,oBAArB1D,EAAUO,QACpB,kBAACoD,EAAA,EAAD,CAAQC,QAASvE,IAAiBW,EAAUtC,IAAKmG,QAASrD,EAAsBoB,MAAM,QAAQmC,KAAK,QAAQC,MAAM,uBAGrH,kBAACR,GAAA,EAAD,CACEtD,KAAMA,EACNuD,QAAQ,gBACRC,IAAK,kBAA4B,oBAArB1D,EAAUO,QAAqD,YAArBP,EAAUO,QAA6C,aAArBP,EAAUO,SAChG,kBAACoD,EAAA,EAAD,CAAQC,QAASvE,IAAiBW,EAAUtC,IAAKmG,QAAS9C,EAAc+C,MAA4B,aAArB9D,EAAUO,OAAuBqB,MAAM,MAAMmC,KAAK,MAAMC,MAAM,oBAGjJ,kBAACR,GAAA,EAAD,CACEtD,KAAMA,EACNuD,QAAQ,gBACRC,IAAK,kBAA4B,oBAArB1D,EAAUO,QAAqD,YAArBP,EAAUO,SAC9D,kBAACoD,EAAA,EAAD,CAAQC,QAASvE,IAAiBW,EAAUtC,IAAKmG,QAAS5C,EAAc6C,MAA4B,cAArB9D,EAAUO,OAAwBqB,MAAM,MAAMmC,KAAK,QAAQC,MAAM,sBAM1JC,QACE,oCACE,kBAACC,EAAA,EAAD,CACEC,WAAYxG,EAAM+C,MAClBmC,aAAchD,EAAW0C,WAAWzC,GAAO+C,aAC3CrF,KAAK,eAIXsG,OAAK,EACLM,KAAK,Y,UCnHLnF,GAAkBC,YAAyB,CAC/CW,WFzFqCP,YACrCP,GACA,SAACQ,GAAD,OAAcA,EAASrC,UEwFvBiC,YAAaC,iBAUf,IAAMI,GAAcC,YAClBR,IARF,SAA4BS,GAC1B,MAAO,CACL2E,YAAa,kBAAM3E,EH3FW,CAChClC,KAAMlB,KG2FJgI,YAAa,kBAAM5E,EHtDd,CACLlC,KAAMZ,SG8DKgD,sBACbJ,GADaI,EA9FY,SAAC,GAErB,IADLC,EACI,EADJA,WAAYwE,EACR,EADQA,YAAaC,EACrB,EADqBA,YAAanF,EAClC,EADkCA,YAEtCoF,YAAiB,CAAEC,IAAK,qBAAsBC,YAC9CC,YAAc,CAAEF,IAAK,qBAAsBG,SAFvC,IAGIC,EAAoBC,cAApBD,gBAHJ,EAIsC7E,mBAAS,IAJ/C,mBAIG+E,EAJH,KAIkBC,EAJlB,OAKoChF,mBAAS,IAL7C,mBAKGiF,EALH,KAKiBC,EALjB,KAOJ9E,qBAAU,WACJyE,EACFP,IAGFC,MACC,CAACM,EAAiBP,EAAaC,IAElCnE,qBAAU,WACR,GAAIN,GAAcA,EAAW3C,OAAQ,CACnC,IAAMgI,EAAQ,YAAO,IAAIC,IAAItF,GAAcA,EAAW3C,OAAOU,KAAI,SAACD,GAAD,OAAWA,EAAM4C,YAClFwE,EAAiBG,EAAStH,KAAI,SAAC2C,GAAD,MAAa,CAAE6E,MAAO7E,EAAQ4C,MAAO5C,UAEpE,CAACV,EAAYA,EAAW3C,SAW3B,OACE,oCACE,kBAACmI,EAAA,OAAD,KACE,4DACA,0BAAMC,KAAK,cAAcrB,QAAQ,iBAEnC,kBAACsB,GAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAS1B,OAAK,EAAC2B,UAAU,mBACvB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,iBACA,kBAACrE,EAAA,EAAD,CAAOsE,aAAW,EAAC9B,MAAM,QACvB,kBAACxC,EAAA,EAAMoE,OAAP,KACE,kBAACpE,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMuE,WAAP,kBACA,kBAACvE,EAAA,EAAMuE,WAAP,mBACA,kBAACvE,EAAA,EAAMuE,WAAP,KAAwC,aAArB1G,EAAYe,KAAsB,YAAc,WACnE,kBAACoB,EAAA,EAAMuE,WAAP,cACA,kBAACvE,EAAA,EAAMuE,WAAP,CAAkBC,QAAS,GACzB,kBAAC,IAAD,CAAQC,QAASjB,EAAekB,YAAY,SAASC,SA1B1C,SAACC,EAAD,GACV,UADoC,EAAb7I,QAEpC4H,EAAgB,IAEdiB,GACFjB,EAAgBiB,EAAS/C,QAqBsEgD,aAAa,GAAGC,aAAW,EAACC,mBAAiB,OAItI,kBAAC/E,EAAA,EAAMgF,KAAP,KACGzG,GAAcA,EAAW0C,YAAc1C,EAAW3C,OAChDyD,QAAO,SAAChD,GAAD,OAAWqH,GAAerH,EAAM4C,SAAWyE,KAClDpH,KAAI,SAACD,EAAOmC,GAAR,OACH,kBAAC,IAAMyG,SAAP,CAAgB/B,IAAK7G,EAAMD,KACzB,kBAAC,GAAD,CAAWmC,WAAYA,EAAYlC,MAAOA,EAAOmC,MAAOA,iB,iCC/E7DsD,IAFQ,SAACe,GAAD,OAAgBA,EAAWqC,QAAO,SAACC,EAAKC,GAA+E,OAArED,GAA4B,WAApBC,EAAI7F,aAA4B6F,EAAIC,MAAQD,EAAIE,aAA4B,K,qWCC7J,IAWeC,E,MAXQC,EAAOC,IAAV,KC8ELC,MAlEf,YAEI,IADFC,EACC,EADDA,UAAWjK,EACV,EADUA,aAAckK,EACxB,EADwBA,iBAAkBC,EAC1C,EAD0CA,oBAAqBC,EAC/D,EAD+DA,oBAEhE,OAAKH,EAKH,kBAAC3F,EAAA,EAAMC,IAAP,CAAW8F,SAAoC,QAA1BJ,EAAUpG,YAAuB2D,IAAKyC,EAAUK,IACnE,kBAAChG,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,aAA2BoG,EAAU3B,MACrE,kBAAChE,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,aAC9B,kBAAC,IAAD,CACEiC,YAAY,OACZE,aAAc,EACdC,mBAAiB,EACjBuE,OAAO,IACPrE,MAAO8D,EAAUQ,OAGrB,kBAACnG,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,aAA2B6G,IAAWT,EAAUU,WAChF,kBAACrG,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,aAC9B,kBAAC,IAAD,CACEiC,YAAY,OACZC,mBAAiB,EACjBC,aAAc,EACdC,mBAAiB,EACjBC,OAAO,OACPC,MAAO8D,EAAUN,SAGrB,kBAACrF,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,YAA0BwG,SAAoC,aAA1BJ,EAAUpG,YAA4B+G,SAAoC,aAA1BX,EAAUpG,aAC5H,kBAACgH,EAAD,KACE,8BAAOZ,EAAUL,YAChB5J,GACC,kBAAC2G,EAAA,EAAOmE,MAAR,CAAcrC,UAAU,mBAAmBsC,KAAK,OAAOC,SAAO,GAC5D,kBAACrE,EAAA,EAAD,CAAQsE,SAAO,EAACnE,OAAK,EAACC,KAAK,QAAQF,QAAS,kBAAMsD,EAAoBF,EAAUK,KAAKtD,MAAM,sBAC3F,kBAACL,EAAA,EAAD,CAAQsE,SAAO,EAACnE,OAAK,EAACC,KAAK,OAAOF,QAAS,kBAAMuD,EAAoBH,EAAUK,KAAKtD,MAAM,yBAKlG,kBAAC1C,EAAA,EAAMO,KAAP,CAAY0F,SAAoC,WAA1BN,EAAUpG,aAC9B,kBAAC,IAAD,CACEiC,YAAY,OACZC,mBAAiB,EACjBC,aAAc,EACdC,mBAAiB,EACjBC,OAAO,OACPC,MAAO8D,EAAUN,MAAQM,EAAUL,cAGtC5J,GACC,kBAACsE,EAAA,EAAMO,KAAP,CAAYyB,UAAU,UAAS,kBAACK,EAAA,EAAD,CAAQ/B,MAAM,MAAMmG,KAAK,OAAOhE,KAAK,QAAQC,MAAM,cAAcH,QAAS,kBAAMqD,EAAiBD,EAAUK,SAhDvI,MCwHIpD,IA1Hf,YAEI,IADFlH,EACC,EADDA,aAAc6F,EACb,EADaA,aAAcsB,EAC3B,EAD2BA,WAAY+D,EACvC,EADuCA,iBAAkBC,EACzD,EADyDA,oBAAqBC,EAC9E,EAD8EA,4BAA6BC,EAC3G,EAD2GA,4BAA6BC,EACxI,EADwIA,eAAgBC,EACxJ,EADwJA,cAAerB,EACvK,EADuKA,iBAAkBC,EACzL,EADyLA,oBAAqBC,EAC9M,EAD8MA,oBAAqB5J,EACnO,EADmOA,KACnO,EAC6BuC,mBAAS,IADtC,mBACMyI,EADN,KACeC,EADf,OAEmC1I,oBAAS,GAF5C,mBAEM2I,EAFN,KAEkBC,EAFlB,KAaD,OAAKxE,EAIH,kBAACyE,EAAA,EAAMC,QAAP,CAAelH,MAAO,CAAEmH,UAAW,WACvB,eAATtL,GACC,oCACE,kBAACkI,EAAA,EAAD,CAAQC,GAAG,MAAX,0BAAoC9C,IACpC,iHAGJ,kBAACvB,EAAA,EAAD,CAAOyH,QAAM,EAACnD,aAAW,EAACjE,MAAO,CAAEqH,SAAU,UAC3C,kBAAC1H,EAAA,EAAMoE,OAAP,KACE,kBAACpE,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMuE,WAAP,aACA,kBAACvE,EAAA,EAAMuE,WAAP,YACA,kBAACvE,EAAA,EAAMuE,WAAP,kBACA,kBAACvE,EAAA,EAAMuE,WAAP,mBACA,kBAACvE,EAAA,EAAMuE,WAAP,gBACA,kBAACvE,EAAA,EAAMuE,WAAP,cACC7I,GACC,kBAACsE,EAAA,EAAMuE,WAAP,QAIN,kBAACvE,EAAA,EAAMgF,KAAP,KACGnC,EAAWxD,QAAO,SAACsI,GAAD,OAAeA,EAAUrC,cAAYhJ,KAAI,SAACqL,GAAD,OAC1D,kBAAC,IAAM1C,SAAP,CAAgB/B,IAAKyE,EAAU3B,IAC7B,kBAAC,EAAD,CAAWL,UAAWgC,EAAWjM,aAAcA,EAAckK,iBAAkBA,EAAkBC,oBAAqBA,EAAqBC,oBAAqBA,SAItK,kBAAC9F,EAAA,EAAM4H,OAAP,KACGlM,IAAiB0L,GAChB,kBAACpH,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMuE,WAAP,CAAkBC,QAAQ,MACxB,kBAACnC,EAAA,EAAD,CAAQwF,UAAQ,EAACrF,OAAK,EAACC,KAAK,OAAOE,QAAQ,WAAWJ,QAAS,kBAAM8E,GAAc,QAIxF3L,GAAgB0L,GACf,kBAACpH,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMuE,WAAP,CAAkBC,QAAQ,KACxB,kBAACsD,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKE,OAAN,CAAa/F,MAAO,IAClB,kBAAC,IAAD,CAAQwC,QAASuC,EAAgBrC,SAtDxB,SAACsD,GAC1Bd,EAAWc,IAqDoEvD,YAAY,iBAE7E,kBAACoD,EAAA,EAAKE,OAAN,CAAa/F,MAAO,GAClB,kBAACI,EAAA,EAAD,CAAQI,KAAK,MAAMkE,SAAO,EAACuB,OAAK,EAACvF,QAAQ,MAAMJ,QArDxC,WACvB0E,EAAcC,GACdG,GAAc,UAyDR,kBAACrH,EAAA,EAAMC,IAAP,KACE,kBAACD,EAAA,EAAMuE,WAAP,CAAkBC,QAAS9I,EAAe,EAAI,EAAGsG,UAAU,SAA3D,oBACA,kBAAChC,EAAA,EAAMuE,WAAP,KACE,kBAAC,IAAD,CACE/C,YAAY,OACZC,mBAAiB,EACjBC,aAAc,EACdC,mBAAiB,EACjBC,OAAO,OACPC,MAAOgB,EAAWqC,QAAO,SAACC,EAAKC,GAA+E,OAArED,GAA4B,WAApBC,EAAI7F,aAA4B6F,EAAIC,MAAQD,EAAIE,aAA4B,SAMtIsB,IAAqBG,GACpB,kBAACoB,EAAA,EAAD,CAASjI,SAAO,GACd,kBAACiI,EAAA,EAAQ/D,OAAT,yDACA,iFAEGgE,OAAOtB,EAA4BuB,UAAUC,QAAQ,GAFxD,MAOHzB,GACC,kBAACsB,EAAA,EAAD,CAASI,MAAI,GACX,kBAACJ,EAAA,EAAQ/D,OAAT,kFACA,2BACGyC,KAlFF","file":"static/js/13.1c0ec98a.chunk.js","sourcesContent":["/*\n * ProducerOrdersPage Constants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const FETCH_ORDERS = 'beerlocal/ProducerOrdersPage/FETCH_ORDERS';\nexport const FETCH_ORDERS_SUCCESS = 'beerlocal/ProducerOrdersPage/FETCH_ORDERS_SUCCESS';\nexport const FETCH_ORDERS_ERROR = 'beerlocal/ProducerOrdersPage/FETCH_ORDERS_ERROR';\nexport const EDIT_ORDER = 'beerlocal/ProducerOrdersPage/EDIT_ORDER';\nexport const EDIT_ORDER_SUCCESS = 'beerlocal/ProducerOrdersPage/EDIT_ORDER_SUCCESS';\nexport const EDIT_ORDER_ERROR = 'beerlocal/ProducerOrdersPage/EDIT_ORDER_ERROR';\nexport const CLEAR_ORDERS = 'beerlocal/ProducerOrdersPage/CLEAR_ORDERS';\n","import produce from 'immer';\nimport {\n  FETCH_ORDERS,\n  FETCH_ORDERS_SUCCESS,\n  FETCH_ORDERS_ERROR,\n  EDIT_ORDER,\n  EDIT_ORDER_SUCCESS,\n  EDIT_ORDER_ERROR,\n  CLEAR_ORDERS,\n} from './constants';\n\nexport const initialState = {\n  fetchingOrders: false,\n  fetchOrdersError: false,\n  editingOrder: false,\n  editOrderError: false,\n  orders: false,\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst producerOrdersPageReducer = (state = initialState, action) => produce(state, (draftState) => {\n  switch (action.type) {\n    default:\n      break;\n    case FETCH_ORDERS:\n      draftState.fetchOrdersError = false;\n      draftState.fetchingOrders = true;\n      break;\n    case FETCH_ORDERS_SUCCESS:\n      if (action.orders) {\n        draftState.orders = action.orders;\n        draftState.fetchOrdersError = false;\n      }\n      draftState.fetchingOrders = false;\n      break;\n    case FETCH_ORDERS_ERROR:\n      draftState.fetchOrdersError = true;\n      draftState.fetchingOrders = false;\n      break;\n    case EDIT_ORDER:\n      if (action.editObj) {\n        draftState.editOrderError = false;\n        draftState.editingOrder = action.editObj._id;\n      }\n      break;\n    case EDIT_ORDER_SUCCESS:\n      if (action.order) {\n        draftState.orders.orders = draftState.orders.orders.map((order) => {\n          if (order._id === action.order._id) {\n            return action.order;\n          }\n          return order;\n        });\n        draftState.editOrderError = false;\n      }\n      draftState.editingOrder = false;\n      break;\n    case EDIT_ORDER_ERROR:\n      draftState.editOrderError = true;\n      draftState.editingOrder = false;\n      break;\n    case CLEAR_ORDERS:\n      draftState.orders = false;\n      break;\n  }\n});\n\nexport default producerOrdersPageReducer;\n","import {\n  call, put, debounce, spawn,\n} from 'redux-saga/effects';\nimport { FETCH_ORDERS, EDIT_ORDER } from './constants';\nimport {\n  ordersFetched, ordersFetchError, orderEditError, orderEdited,\n} from './actions';\nimport { getPrivateRoute } from '../../utils/api';\n\nfunction* fetchOrders() {\n  try {\n    const privateRoute = yield call(getPrivateRoute);\n    const fetchOrdersData = () => privateRoute.get('/orders');\n    const response = yield call(fetchOrdersData);\n\n    // console.log('ORDERS RETRIEVED', response.data);\n\n    // const images = yield all(response.data.businesses.map((business) => call(getAvatar, business.businessId)));\n\n    // console.log('IMAGES', images);\n\n    const data = { ...response.data /* images */ };\n\n    if (response.data) {\n      yield put(ordersFetched(data));\n    }\n  } catch (err) {\n    yield put(ordersFetchError(err));\n  }\n}\n\nfunction* editOrder({ editObj }) {\n  try {\n    const privateRoute = yield call(getPrivateRoute);\n    const editOrderData = () => privateRoute.patch(`/orders/${editObj._id}`, editObj);\n\n    const response = yield call(editOrderData);\n    if (response.data) {\n      yield put(orderEdited(response.data.order));\n    }\n  } catch (err) {\n    yield put(orderEditError(err));\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nfunction* fetchOrdersSaga() {\n  yield debounce(2000, FETCH_ORDERS, fetchOrders);\n}\n\nfunction* editOrderSaga() {\n  yield debounce(2000, EDIT_ORDER, editOrder);\n}\n\nexport default function* rootSaga() {\n  yield spawn(fetchOrdersSaga);\n  yield spawn(editOrderSaga);\n}\n","/*\n *\n * App actions\n *\n */\n\nimport {\n  FETCH_ORDERS,\n  FETCH_ORDERS_SUCCESS,\n  FETCH_ORDERS_ERROR,\n  EDIT_ORDER,\n  EDIT_ORDER_SUCCESS,\n  EDIT_ORDER_ERROR,\n  CLEAR_ORDERS,\n} from './constants';\n\nexport const fetchOrders = () => ({\n  type: FETCH_ORDERS,\n});\n\nexport function ordersFetched(orders) {\n  return {\n    type: FETCH_ORDERS_SUCCESS,\n    orders,\n  };\n}\n\nexport function ordersFetchError(error) {\n  return {\n    type: FETCH_ORDERS_ERROR,\n    error,\n  };\n}\n\nexport const editOrder = (editObj) => ({\n  type: EDIT_ORDER,\n  editObj,\n});\n\nexport function orderEdited(order) {\n  return {\n    type: EDIT_ORDER_SUCCESS,\n    order,\n  };\n}\n\nexport function orderEditError(error) {\n  return {\n    type: EDIT_ORDER_ERROR,\n    error,\n  };\n}\n\nexport function clearOrders() {\n  return {\n    type: CLEAR_ORDERS,\n  };\n}\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the ProducerOrdersPage state domain\n */\n\nconst selectProducerOrdersPageDomain = (state) => state.ProducerOrdersPage || initialState;\n\n/**\n * Other specific selectors\n */\nconst makeSelectProducerOrders = () => createSelector(\n  selectProducerOrdersPageDomain,\n  (substate) => substate.orders,\n);\n\nconst makeSelectEditingOrder = () => createSelector(\n  selectProducerOrdersPageDomain,\n  (substate) => substate.editingOrder,\n);\n\n/**\n * Default selector used by ProducerOrdersPage\n */\n\nconst makeSelectProducerOrdersPage = () => createSelector(\n  selectProducerOrdersPageDomain,\n  (substate) => substate,\n);\n\nexport default makeSelectProducerOrdersPage;\nexport { selectProducerOrdersPageDomain, makeSelectProducerOrders, makeSelectEditingOrder };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Table, Button, Popup, Image,\n} from 'semantic-ui-react';\nimport moment from 'moment';\nimport NumberFormat from 'react-number-format';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { Link } from 'react-router-dom';\n\nimport calcOrderTotal from '../../utils/calcOrderTotal';\nimport OrderModalContent from '../../components/OrderModalContent';\nimport Can from '../../components/Can';\nimport { editOrder } from './actions';\nimport { makeSelectUser } from '../App/selectors';\nimport { makeSelectEditingOrder } from './selectors';\n\nconst OrderItem = ({\n  userProfile, ordersInfo, order, index, orderEdit, orderEditing,\n}) => {\n  const [orderData, setOrderData] = useState({ ...order });\n\n  const { role } = userProfile;\n\n  useEffect(() => {\n    setOrderData({ ...order });\n  }, [order]);\n\n  const handleConfirm = async () => {\n    // const privateRoute = await getPrivateRoute();\n    const confirmedOrder = { _id: orderData._id, status: orderData.status === 'Confirmed' ? 'Pending' : 'Confirmed' };\n    orderEdit(confirmedOrder);\n    // try {\n    //   const response = await privateRoute.patch(`/orders/${order._id}`, confirmedOrder);\n    //   // setOrderData(confirmedOrder);\n    //   ordersFetch();\n    //   console.log('RESPONSE', response.data);\n    // } catch (err) {\n    //   console.error(err);\n    // }\n  };\n\n  const handleChangesConfirm = async () => {\n    // const privateRoute = await getPrivateRoute();\n    const itemsApproved = order.items\n      .filter((orderItem) => orderItem.orderChange !== 'delete')\n      .map((orderItem) => ({ ...orderItem, orderChange: '' }));\n    const pendingOrder = { _id: orderData._id, status: 'Pending', items: itemsApproved };\n\n    orderEdit(pendingOrder);\n\n    // try {\n    //   const response = await privateRoute.patch(`/orders/${order._id}`, confirmedOrder);\n    //   // setOrderData(confirmedOrder);\n    //   ordersFetch();\n    //   console.log(response);\n    // } catch (err) {\n    //   console.error(err);\n    // }\n  };\n\n  const handleReject = async () => {\n    // const privateRoute = await getPrivateRoute();\n    const rejectedOrder = { _id: orderData._id, status: orderData.status === 'Rejected' ? 'Pending' : 'Rejected' };\n\n    orderEdit(rejectedOrder);\n    // try {\n    //   const response = await privateRoute.patch(`/orders/${order._id}`, rejectedOrder);\n    //   // setOrderData(rejectedOrder);\n    //   ordersFetch();\n    //   console.log(response);\n    // } catch (err) {\n    //   console.error(err);\n    // }\n  };\n\n  const handleCancel = async () => {\n    // const privateRoute = await getPrivateRoute();\n    const cancelledOrder = { _id: orderData._id, status: 'Cancelled' };\n\n    orderEdit(cancelledOrder);\n\n    // try {\n    //   const response = await privateRoute.patch(`/orders/${order._id}`, cancelledOrder);\n    //   // setOrderData(rejectedOrder);\n    //   ordersFetch();\n    //   console.log(response);\n    // } catch (err) {\n    //   console.error(err);\n    // }\n  };\n\n  return (\n    <Popup\n      mouseEnterDelay={500}\n      trigger={(\n        <Table.Row warning={userProfile.role === 'producer' ? orderData.producerNotification : orderData.retailerNotification} style={{ color: (order.status === 'Rejected' || order.status === 'Cancelled') && 'lightgray' }}>\n          <Table.Cell>{`SO-${order.orderNumber.toString().padStart(6, '0')}`}</Table.Cell>\n          <Table.Cell>{moment(order.createdAt).format('DD/MM/YYYY')}</Table.Cell>\n          <Table.Cell>\n            <Image style={{ marginLeft: '0.5em' }} src={ordersInfo.businesses[index].avatarSource || '/images/avatars/blank-avatar.webp'} alt=\"user avatar\" avatar />\n            {userProfile.role === 'retailer'\n              ? <Link to={`/brewery/${ordersInfo.businesses[index].businessId}`}>{ordersInfo.businesses[index].businessName}</Link>\n              : <>{ordersInfo.businesses[index].businessName}</>}\n          </Table.Cell>\n          <Table.Cell>\n            <NumberFormat\n              displayType=\"text\"\n              thousandSeparator\n              decimalScale={2}\n              fixedDecimalScale\n              prefix=\"£\"\n              // eslint-disable-next-line no-param-reassign\n              value={calcOrderTotal(order.items)}\n            />\n          </Table.Cell>\n          <Table.Cell style={{ fontWeight: order.status === 'Confirmed' && 'bold' }}>{order.status}</Table.Cell>\n          <Table.Cell textAlign=\"center\" width={2}><Link to={`/order/${order._id}`}>View Details</Link></Table.Cell>\n          {/* <Modal\n        trigger={<Table.Cell textAlign=\"center\" width={2}>View Details</Table.Cell>}\n        dimmer=\"inverted\"\n      >\n        <Modal.Content>\n          <Modal.Description>\n            <OrderModalContent\n              editingOrder={editingOrder}\n              orderItems={order.items}\n              availableStock={availableStock}\n              handleAddItem={handleAddItem}\n              handleDeleteItem={handleDeleteItem}\n              handleDecreaseQuant={handleDecreaseQuant}\n              handleIncreaseQuant={handleIncreaseQuant}\n              businessName={ordersInfo.businesses[index].businessName}\n              type=\"orderInfo\"\n            />\n          </Modal.Description>\n          <MessageFeed messages={order.messages} user={userProfile} business={ordersInfo.businesses[index]} businessAvatar={ordersInfo.images[index]} />\n        </Modal.Content>\n        <Modal.Actions>\n          {editingOrder\n            ? (\n              <>\n                <Button content=\"Cancel\" onClick={() => setEditingOrder(false)} />\n                <Button content=\"Save\" primary onClick={handleSave} />\n              </>\n            )\n            : (\n              <>\n                <Modal basic size=\"tiny\" open={messageModalOpen} trigger={<Button onClick={() => setMessageModalOpen(true)}>Add Message</Button>}>\n                  <Modal.Content>\n                    <Modal.Description>\n                      <Header>Add Message</Header>\n                      <Form>\n                        <Form.TextArea value={messageContent} onChange={(e) => setMessageContent(e.target.value)} placeholder=\"Write your message...\" />\n                      </Form>\n                    </Modal.Description>\n                  </Modal.Content>\n                  <Modal.Actions>\n                    <Button color=\"red\" inverted content=\"Cancel\" onClick={() => setMessageModalOpen(false)} />\n                    <Button primary inverted content=\"Submit\" onClick={handleMessageSend} />\n                  </Modal.Actions>\n                </Modal>\n                <Can\n                  role={role}\n                  perform=\"orders:edit\"\n                  yes={() => <Button primary content=\"Edit\" onClick={() => setEditingOrder(true)} />}\n                />\n              </>\n            )}\n        </Modal.Actions>\n      </Modal> */}\n          <Table.Cell textAlign=\"center\">\n            <Can\n              role={role}\n              perform=\"orders:confirm\"\n              yes={() => (orderData.status === 'Pending' || orderData.status === 'Confirmed') && (\n                <Button loading={orderEditing === orderData._id} onClick={handleConfirm} basic={orderData.status !== 'Confirmed'} color=\"green\" icon=\"check\" title=\"Confirm order\" />\n              )}\n            />\n            <Can\n              role={role}\n              perform=\"orders:changes-confirm\"\n              yes={() => (orderData.status === 'Changes pending') && (\n                <Button loading={orderEditing === orderData._id} onClick={handleChangesConfirm} color=\"green\" icon=\"check\" title=\"Approve changes\" />\n              )}\n            />\n            <Can\n              role={role}\n              perform=\"orders:reject\"\n              yes={() => (orderData.status === 'Changes pending' || orderData.status === 'Pending' || orderData.status === 'Rejected') && (\n                <Button loading={orderEditing === orderData._id} onClick={handleReject} basic={orderData.status !== 'Rejected'} color=\"red\" icon=\"ban\" title=\"Reject order\" />\n              )}\n            />\n            <Can\n              role={role}\n              perform=\"orders:cancel\"\n              yes={() => (orderData.status === 'Changes pending' || orderData.status === 'Pending') && (\n                <Button loading={orderEditing === orderData._id} onClick={handleCancel} basic={orderData.status !== 'Cancelled'} color=\"red\" icon=\"close\" title=\"Cancel order\" />\n              )}\n            />\n          </Table.Cell>\n        </Table.Row>\n      )}\n      content={(\n        <>\n          <OrderModalContent\n            orderItems={order.items}\n            businessName={ordersInfo.businesses[index].businessName}\n            type=\"orderInfo\"\n          />\n        </>\n      )}\n      basic\n      wide=\"very\"\n    />\n  );\n};\n\nOrderItem.propTypes = {\n  userProfile: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  ordersInfo: PropTypes.object,\n  order: PropTypes.object,\n  index: PropTypes.number,\n  orderEdit: PropTypes.func,\n  role: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  orderEditing: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\n\nconst mapStateToProps = createStructuredSelector({\n  userProfile: makeSelectUser(),\n  orderEditing: makeSelectEditingOrder(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    orderEdit: (editObj) => dispatch(editOrder(editObj)),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\nexport default compose(\n  withConnect,\n)(OrderItem);\n","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nimport { createStructuredSelector } from 'reselect';\nimport { Header, Table, Segment } from 'semantic-ui-react';\nimport { Helmet } from 'react-helmet';\nimport Select from 'react-select';\nimport { useInjectReducer } from '../../utils/injectReducer';\nimport { useInjectSaga } from '../../utils/injectSaga';\n// import { loadSession, closeSession } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\nimport { makeSelectProducerOrders } from './selectors';\nimport { fetchOrders, clearOrders } from './actions';\n\nimport OrderItem from './OrderItem';\nimport PageWrapper from '../../components/PageWrapper';\nimport { makeSelectUser } from '../App/selectors';\n\nconst ProducerOrdersPage = ({\n  ordersInfo, ordersFetch, ordersClear, userProfile,\n}) => {\n  useInjectReducer({ key: 'ProducerOrdersPage', reducer });\n  useInjectSaga({ key: 'ProducerOrdersPage', saga });\n  const { isAuthenticated } = useAuth0();\n  const [orderStatuses, setOrderStatuses] = useState([]);\n  const [statusFilter, setStatusFilter] = useState('');\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      ordersFetch();\n      return;\n    }\n    ordersClear();\n  }, [isAuthenticated, ordersFetch, ordersClear]);\n\n  useEffect(() => {\n    if (ordersInfo && ordersInfo.orders) {\n      const statuses = [...new Set(ordersInfo && ordersInfo.orders.map((order) => order.status))];\n      setOrderStatuses(statuses.map((status) => ({ label: status, value: status })));\n    }\n  }, [ordersInfo, ordersInfo.orders]);\n\n  const handleSelectChange = (selected, { action }) => {\n    if (action === 'clear') {\n      setStatusFilter('');\n    }\n    if (selected) {\n      setStatusFilter(selected.value);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>beerLocal - Order History</title>\n        <meta name=\"description\" content=\"Your orders\" />\n      </Helmet>\n      <PageWrapper>\n        <Segment basic className=\"primary wrapper\">\n          <Header as=\"h1\">Order History</Header>\n          <Table unstackable basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Order no.</Table.HeaderCell>\n                <Table.HeaderCell>Order date</Table.HeaderCell>\n                <Table.HeaderCell>{userProfile.role === 'producer' ? 'Purchaser' : 'Brewery'}</Table.HeaderCell>\n                <Table.HeaderCell>Total</Table.HeaderCell>\n                <Table.HeaderCell colSpan={3}>\n                  <Select options={orderStatuses} placeholder=\"Filter\" onChange={handleSelectChange} defaultValue=\"\" isClearable escapeClearsValue />\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {ordersInfo && ordersInfo.businesses && ordersInfo.orders\n                .filter((order) => statusFilter ? order.status === statusFilter : true)\n                .map((order, index) => (\n                  <React.Fragment key={order._id}>\n                    <OrderItem ordersInfo={ordersInfo} order={order} index={index} />\n                  </React.Fragment>\n                ))}\n            </Table.Body>\n          </Table>\n        </Segment>\n      </PageWrapper>\n    </>\n  );\n};\n\nProducerOrdersPage.propTypes = {\n  ordersInfo: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  ordersFetch: PropTypes.func,\n  ordersClear: PropTypes.func,\n  userProfile: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nconst mapStateToProps = createStructuredSelector({\n  ordersInfo: makeSelectProducerOrders(),\n  userProfile: makeSelectUser(),\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    ordersFetch: () => dispatch(fetchOrders()),\n    ordersClear: () => dispatch(clearOrders()),\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\nexport default compose(\n  withConnect,\n)(ProducerOrdersPage);\n","/* eslint-disable no-param-reassign */\nconst calcOrderTotal = (orderItems) => orderItems.reduce((acc, val) => { acc += (val.orderChange !== 'delete' && val.price * val.orderQuant); return acc; }, 0);\n\nexport default calcOrderTotal;\n","import styled from 'styled-components';\n\nconst OrderLineStyle = styled.div`\n  .quantity-buttons {\n    margin-left: 10px;\n\n    button.primary.button {\n      width: 30px;\n      padding: 7.5px 0;\n    }\n  }\n`;\n\nexport default OrderLineStyle;\n","/* eslint-disable no-param-reassign */\n/**\n *\n * OrderModalContent\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button } from 'semantic-ui-react';\nimport NumberFormat from 'react-number-format';\nimport { PACK_SIZES } from '../../utils/constants';\nimport QuantityButtonStyle from './QuantityButtonStyle';\n\nfunction OrderLine({\n  orderLine, editingOrder, handleDeleteItem, handleDecreaseQuant, handleIncreaseQuant,\n}) {\n  if (!orderLine) {\n    return null;\n  }\n\n  return (\n    <Table.Row positive={orderLine.orderChange === 'add'} key={orderLine.id}>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'}>{orderLine.name}</Table.Cell>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'}>\n        <NumberFormat\n          displayType=\"text\"\n          decimalScale={1}\n          fixedDecimalScale\n          suffix=\"%\"\n          value={orderLine.abv}\n        />\n      </Table.Cell>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'}>{PACK_SIZES[orderLine.packSize]}</Table.Cell>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'}>\n        <NumberFormat\n          displayType=\"text\"\n          thousandSeparator\n          decimalScale={2}\n          fixedDecimalScale\n          prefix=\"£\"\n          value={orderLine.price}\n        />\n      </Table.Cell>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'} positive={orderLine.orderChange === 'increase'} negative={orderLine.orderChange === 'decrease'}>\n        <QuantityButtonStyle>\n          <span>{orderLine.orderQuant}</span>\n          {editingOrder && (\n            <Button.Group className=\"quantity-buttons\" size=\"mini\" compact>\n              <Button primary basic icon=\"minus\" onClick={() => handleDecreaseQuant(orderLine.id)} title=\"Decrease quantity\" />\n              <Button primary basic icon=\"plus\" onClick={() => handleIncreaseQuant(orderLine.id)} title=\"Increase quantity\" />\n            </Button.Group>\n          )}\n        </QuantityButtonStyle>\n      </Table.Cell>\n      <Table.Cell disabled={orderLine.orderChange === 'delete'}>\n        <NumberFormat\n          displayType=\"text\"\n          thousandSeparator\n          decimalScale={2}\n          fixedDecimalScale\n          prefix=\"£\"\n          value={orderLine.price * orderLine.orderQuant}\n        />\n      </Table.Cell>\n      {editingOrder && (\n        <Table.Cell textAlign=\"center\"><Button color=\"red\" size=\"mini\" icon=\"close\" title=\"Cancel item\" onClick={() => handleDeleteItem(orderLine.id)} /></Table.Cell>\n      )}\n    </Table.Row>\n  );\n}\n\nOrderLine.propTypes = {\n  orderLine: PropTypes.object,\n  editingOrder: PropTypes.bool,\n  handleDeleteItem: PropTypes.func,\n  handleDecreaseQuant: PropTypes.func,\n  handleIncreaseQuant: PropTypes.func,\n};\n\nexport default OrderLine;\n","/* eslint-disable no-param-reassign */\n/**\n *\n * OrderModalContent\n *\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Modal, Header, Table, Button, Grid, Message,\n} from 'semantic-ui-react';\nimport NumberFormat from 'react-number-format';\nimport Select from 'react-select';\nimport OrderLine from '../OrderLine';\n\nfunction OrderModalContent({\n  editingOrder, businessName, orderItems, distancePurchase, deliveryInstruction, distantPurchasingConditions, distantPurchasingMinimumMet, availableStock, handleAddItem, handleDeleteItem, handleDecreaseQuant, handleIncreaseQuant, type,\n}) {\n  const [newItem, setNewItem] = useState({});\n  const [addingItem, setAddingItem] = useState(false);\n\n  const handleSelectChange = (selectedOption) => {\n    setNewItem(selectedOption);\n  };\n\n  const handleAddingItem = () => {\n    handleAddItem(newItem);\n    setAddingItem(false);\n  };\n\n  if (!orderItems) {\n    return null;\n  }\n  return (\n    <Modal.Content style={{ overflowX: 'scroll' }}>\n      {type === 'draftOrder' && (\n        <>\n          <Header as=\"h5\">{`Your order from ${businessName}`}</Header>\n          <p>This is the contents of your order. Click below to confirm, or cancel to go back.</p>\n        </>\n      )}\n      <Table celled unstackable style={{ minWidth: '600px' }}>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>ABV</Table.HeaderCell>\n            <Table.HeaderCell>Pack Size</Table.HeaderCell>\n            <Table.HeaderCell>List Price</Table.HeaderCell>\n            <Table.HeaderCell>Order #</Table.HeaderCell>\n            <Table.HeaderCell>Total</Table.HeaderCell>\n            {editingOrder && (\n              <Table.HeaderCell></Table.HeaderCell>\n            )}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {orderItems.filter((stockItem) => stockItem.orderQuant).map((stockItem) => (\n            <React.Fragment key={stockItem.id}>\n              <OrderLine orderLine={stockItem} editingOrder={editingOrder} handleDeleteItem={handleDeleteItem} handleDecreaseQuant={handleDecreaseQuant} handleIncreaseQuant={handleIncreaseQuant} />\n            </React.Fragment>\n          ))}\n        </Table.Body>\n        <Table.Footer>\n          {editingOrder && !addingItem && (\n            <Table.Row>\n              <Table.HeaderCell colSpan=\"16\">\n                <Button attached basic icon=\"plus\" content=\"Add item\" onClick={() => setAddingItem(true)} />\n              </Table.HeaderCell>\n            </Table.Row>\n          )}\n          {editingOrder && addingItem && (\n            <Table.Row>\n              <Table.HeaderCell colSpan=\"7\">\n                <Grid columns={2}>\n                  <Grid.Column width={12}>\n                    <Select options={availableStock} onChange={handleSelectChange} placeholder=\"Select item\" />\n                  </Grid.Column>\n                  <Grid.Column width={4}>\n                    <Button icon=\"add\" primary fluid content=\"Add\" onClick={handleAddingItem} />\n                  </Grid.Column>\n                </Grid>\n              </Table.HeaderCell>\n            </Table.Row>\n          )}\n          <Table.Row>\n            <Table.HeaderCell colSpan={editingOrder ? 6 : 5} textAlign=\"right\">Estimated Total:</Table.HeaderCell>\n            <Table.HeaderCell>\n              <NumberFormat\n                displayType=\"text\"\n                thousandSeparator\n                decimalScale={2}\n                fixedDecimalScale\n                prefix=\"£\"\n                value={orderItems.reduce((acc, val) => { acc += (val.orderChange !== 'delete' && val.price * val.orderQuant); return acc; }, 0)}\n              />\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n      {distancePurchase && !distantPurchasingMinimumMet && (\n        <Message warning>\n          <Message.Header>You are outside this brewery&apos;s distribution area</Message.Header>\n          <p>\n            To process your order, you must spent at least £\n            {Number(distantPurchasingConditions.minSpend).toFixed(2)}\n            .\n          </p>\n        </Message>\n      )}\n      {deliveryInstruction && (\n        <Message info>\n          <Message.Header>The following delivery instructions will be passed along with your order:</Message.Header>\n          <p>\n            {deliveryInstruction}\n          </p>\n        </Message>\n      )}\n    </Modal.Content>\n  );\n}\n\nOrderModalContent.propTypes = {\n  editingOrder: PropTypes.bool,\n  businessName: PropTypes.string,\n  orderItems: PropTypes.array,\n  type: PropTypes.string,\n  distantPurchasingConditions: PropTypes.object,\n  distancePurchase: PropTypes.bool,\n  deliveryInstruction: PropTypes.string,\n  distantPurchasingMinimumMet: PropTypes.bool,\n  availableStock: PropTypes.array,\n  handleAddItem: PropTypes.func,\n  handleDeleteItem: PropTypes.func,\n  handleDecreaseQuant: PropTypes.func,\n  handleIncreaseQuant: PropTypes.func,\n};\n\nexport default OrderModalContent;\n"],"sourceRoot":""}